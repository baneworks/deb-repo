#!/usr/bin/env bash
# @file lib-build
# @brief A library for generating build-depends for a task.

# region #! globals

#! constraints
BREQ_MAX_DEPTH=17

#! build-reqs dir
BREQ_DIR="${PROJ_DIR}/.build-reqs" # fixme: ugly realisation of BTREE

# endregion

# region #! include

. ./bin/bspec-lib
. ./bin/debver-lib
. ./bin/test-lib

# endregion

# region #! breq strings funcs

# pack depends to spaceless string: breqPackString <string>
breqPackString() {
  local str="$1"
  # str=$(tr -cd '[:print:]' <<< "$str")
  str="${str//' '/'&'}"
  echo "$str"
}

# unpack spaceless string: breqUnpackString <string>
breqUnpackString() {
  local str="$1"
  str="${str//'&'/' '}"
  echo "$str"
}

# unpack and call taskParseBR: breqParsePacked <string>
breqParsePacked() {
  local unpacked=$(breqUnpackString "$1")
  unpacked=$(sed 's/\(.*\)\:any$/\1/' <<< "$unpacked") # fixme: package:any hack
  local breqs=$(taskParseBR "$unpacked")
  echo "${breqs[*]}"
}

# endregion

# region #! version funcs

# check version reqs and return index of suitable: breqWhichVersion <cond> <@versions>
# @description Function to find suitable package from available packages accroding dependency requrenment string.
#
# @example
#    $(breqWhichVersion <req> <packages>)"
#
# @arg `req` requrenment string like ">= 2.4 2.31-13+deb11u6".
# @arg packages array of available in [bspec](./lib-bspec) format.
#
# @stdout index of suitable package
#
# @exitcode 0 on success
# @exitcode 1 on failure.
breqWhichVersion() {
  local cond="$1"
  shift
  local avail=($@)

  testAddToVersionSamples $cond $avail # generate version samples

  for ((idx=0; idx < ${#avail[@]}; ++idx)); do
    local matched=$(dverMatch "$cond" "${avail[$idx]}")
    [[ -n "$matched" ]] && break
  done


  if [[ -n $matched ]]; then
    echo $idx
    return 0
  else
    return 1
  fi
}

# endregion

# region #! log funcs

# fixme: breqPrintMsg is ugly - rewrite
# print node tag: breqPrintName <level> <@bnames> <message>"
breqPrintName() {
  local lvl="$1"
  IFS="/" read -ra pth <<< "$2"

  if [[ $lvl -eq 1 ]]; then
    (printf "${COLOR_OFF}{${pth[0]}${COLOR_GREEN} ${pth[1]}${COLOR_OFF}} $3") >&2
    return
  fi

  local len=$(( ${#pth[@]} - 1))
  local head="${pth[@]:0:$len}"
  for h in ${pth[@]:0:$len}; do
    head+="$h "
  done
  last="${pth[-1]}"
  (printf "${COLOR_OFF}{${COLOR_GREEN}$last${COLOR_OFF}} $3") >&2

  return
}

# print status message: breqPrintStatus <level> <status> <message>
breqPrintStatus() {
  local lvl=$1
  shift
  local tail
  [[ $lvl -eq 1 ]] && nl="\n"
  case "$1" in
       'ok') [[ $lvl -eq 1 ]] && (printf " [${COLOR_GREEN}OK${COLOR_OFF}]$nl") >&2 || (printf "") >&2 ;;
    'nodep') (printf "[${COLOR_YELLOW}!dep${COLOR_OFF}] ") >&2 ;;
     'have') (printf "[${COLOR_YELLOW}+$2${COLOR_OFF}] ") >&2 ;;
     'note') (printf "[${COLOR_YELLOW}$2${COLOR_OFF}] ") >&2 ;;
     'warn') (printf "[${COLOR_RED}$2${COLOR_OFF}] ") >&2 ;;
      'err') (printf "[${COLOR_RED}$2${COLOR_OFF}]\n") >&2 ;;
          *) (printf "[${COLOR_RED}$1:$2${COLOR_OFF}]$nl") >&2 ;;
  esac
}

# endregion

# region #! node funcs

# $1 - bspec
breqSeenBefore() {
  local bspec="$1"
  local bname=$(bspecName "$bspec")
  local bver=$(bspecVersionHR "$bspec")
  mapfile -t lines < "$BREQ_DIR/$task/.flatten"
  for line in "${lines[@]}"; do
    line=$(sed 's/^\([0-9]\+\s\+\)\(.*\)$/\2/' <<< "$line")
    local la=(${line})
    for provided_bs in ${la[@]}; do
      local provided_bn=$(bspecName "$provided_bs")
      local provided_bv=$(bspecVersion "$provided_bs")
      if [[ "$bname" == "$provided_bn" ]]; then
        if [[ -z $bver ]]; then
          echo "true"
          return 0
        fi
        if [[ -n $(dverMatch "$bver" "$provided_bv") ]]; then
          echo "true"
          return 0
        else
          echo ""
          return 0
        fi
      fi
    done
  done
}

breqRepStr() {
  local res="$2"
  for ((i=0; i<"$1"; i++)); do
    res="${res}$3"
  done
  echo "${res}$4"
}

# fixme: выкинь - не позорься
# $1 - xoff (x offset), $2 - yoff (lines)
breqArrowToUpper() {
  tput sc
  tput cuf $(( $1 + 40 )) # move the cursor right
  echo -ne "---+" >&2
  for ((y=1; y < $2; ++y)); do
    tput cuu 1 # cursor up
    echo -ne "|" >&2
  done
  echo -ne "<----+" >&2
  tput rc # restore cursor
}

# @description Function to add node to build-depens tree. Reqursive.
#
# @example
#    $(breqAddNode <level> <bspec> <retcode> <retvalue> <@parents>)"
#
# @arg level numeric target level of build-depens tree.
# @arg bspec build-dependency in `bspec` format.
# @arg retcode result code of pervious execution.
# @arg retvalue result value of pervious execution.
#      If cyclic dependency detected contains name of cyclic-dependecy,
#      in other cases contains last processed dependency.
# @arg parents parents array of build-dependency upto root node.
#
# @stdout last processed (failed) package in bspec format (@see bspec).
#
# @exitcode code from previous execution on success.
# @exitcode 1 on general failure.
# @exitcode 2 if cyclic dependies detected.
#
# @see bspec
breqAddNode() {
  local level=$(( $1 + 1 ))
  local bspec="$2"
  local retcode="$3"
  local retvalue="$4"
  shift; shift; shift; shift

  local bname=$(bspecName $bspec)
  local bver=$(bspecVersionHR $bspec)

  #? ---- init ----
  local pa=($@) # parents array
  local parent="${pa[-1]}" # prev node
  local pinfo # parents str separated by "/"
  local req_dir="$BREQ_DIR" # path to store node info
  local is_cyclic cyclic_dir cyclic_parent

  local prev_idx=-1
  for p in "${pa[@]}"; do
    pinfo+="/$p"
    req_dir+="/$p"
    prev_idx=$(( $prev_idx + 1 ))
    #* if bname in parents, trigger cycle checks
    if [[ "$p" == "$bname" ]]; then
      is_cyclic="true"
      cyclic_dir="$req_dir"
      if [[ $prev_idx -ge 0 ]]; then # store cyclic parent
        cyclic_parent=${pa[$prev_idx]}
      else #! cyclic source is task themself - giving up
        breqPrintStatus $level "err" "unbreakable circle"
        echo "$bspec"
        return 1
      fi
    fi
  done

  req_dir+="/$bname"
  pinfo="${pinfo:1}"

  breqPrintName $level "$pinfo/$bname"

  [[ -d "$req_dir" ]] || mkdir "$req_dir"
  echo "$bname" > "$req_dir/.name"
  echo "$bver" > "$req_dir/.version"
  echo "$parent" > "$req_dir/.parent"
  #? ---- /init ----

  # echo -n "parent= $parent bspec=$bspec is_cyclic=$is_cyclic " >&2 # fixme: test

  #? ---- cyclic depend ----
  if [[ -n $is_cyclic ]]; then # yep, cyclic dependecy
    local cycled_bspec="$bname/`cat $cyclic_dir/.version | tr -d ' '`"
    # mark nodes
    echo "$parent $bspec" > "$cyclic_dir/.cyclic"
    echo "$cycled_bspec" > "$req_dir/.cyclic"

    breqPrintStatus $level "warn" "cyclic";

    if [[ "$cycled_bspec" == "$bspec" ]]; then # node of cycle may be with diff version req

      # echo -n "cycled_bspec=$cycled_bspec " >&2 # fixme: test

      #* package may depend on other version, can we solve?
      # todo: write version compatibily checks, for now only warn
      breqPrintStatus $level "warn" "version";
    fi
    echo "$bspec"
    return 2 # as we processed cyclic and no go deeper - unset return code
  fi
  #? ---- /cyclic ----

  # todo: as follows broke full tree search - make variant of addNode for full tree traverse
  #? ---- seen_before ----
  local is_seen=$(breqSeenBefore "$bspec")
  if [[ -n $is_seen ]]; then
    breqPrintStatus $level "have" "$bname"
    echo "$retvalue"
    return $retcode
  fi
  #? ---- /seen ----

  #? ---- gathering depends ----
  local str="$(dockerAptCache "$bname")"
  local dstr=$(breqPackString "$(sed -n 's/^Depends: \(.*\)$/\1/pg' <<< $str)")

  local da
  for line in ${dstr//"\n"/ }; do
    line=$(tr -cd '[:print:]' <<< "$line")
    da+=($line)
  done

  #* nodeps is ok - check for cyclic we done earlier
  if [[ ${#da[@]} -eq 0 ]]; then
    breqPrintStatus $level "nodep"
    # as this isn't error - keep retcode & retvalue unchanged
    echo "$retvalue"
    return $retcode
  fi
  #? ---- /depends ----

  #? ---- versions logic ----
  #* avaible versions
  local vstr=$(sed -n 's/^Version: \(.*\)$/\1/1p' <<< "$str")
  local va
  for line in ${vstr//"\n"/ }; do
    line=$(tr -cd '[:print:]' <<< $line)
    va+=($line)
  done

  #* which version is needed?
  local idx=0
  if [[ -n $bver ]] ; then
    if [[ $bver != '<!nocheck>' ]] && [[ $bver != '[linux-any]' ]]; then # fixme: add propper parsing for: <!nocheck> [linux-any]
      idx=$(breqWhichVersion "$bver" "${va[@]}")
      #! nover isn't good - lets caller decide
      if [[ $? -gt 0 ]]; then
        breqPrintStatus $level "err" "!ver"
        #* general error - mutating retcode & retvalue to this dependency
        echo "$bspec"
        return 1
      fi
    fi
  fi
  local bdeps="${da[$idx]}" #* this is our set
  # update bspec, bver to selected version
  bver="${va[$idx]}"
  bspec="$bname/$bver"
  echo "${bdeps[@]}" > "$req_dir/.satisfyers" # save depend's satisfyers # fixme: not actualy needed
  #? ---- /versions ----

  #? ---- gathering provides ----
  local prov_str=$(breqPackString "$(sed -n 's/^Provides: \(.*\)$/\1/pg' <<< $str)")
  local prov_a
  for line in ${prov_str//"\n"/ }; do
    line=$(tr -cd '[:print:]' <<< "$line")
    prov_a+=($line)
  done
  local provides="${prov_a[$idx]}"
  provides=$(breqParsePacked "${provides[@]}")
  provides=$(sed 's/\/=/\//g' <<< "$provides") # remove = from provides
  echo "$level $bspec $provides" >> "$BREQ_DIR/$task/.flatten" # todo: cover with tests
  echo "$provides" > "$req_dir/.provides" # save depend's provides # fixme: not actualy needed
  #? ---- /provides ----

  #? ---- dive in, praise the buddha ----
  for curset_packed in "${bdeps[@]}"; do
    pa+=("$bname")
    local curset=$(breqParsePacked $curset_packed)
    for bi in ${curset[@]} ; do
      echo -ne $(breqRepStr "$level" "\n" "\t" '-> ') >&2
      #* dive deeper
      retvalue=$(breqAddNode $level "$bi" "$retcode" "$retvalue" "${pa[@]}")
      retcode="$?" #* retcode must survive across call stack, except errors
       # fixme: retval & retcode doesn't work as intended
      # [[ $retcode -eq 2 && $retvalue == $bi ]] && breqPrintStatus $level "err" "cyclic"
      [[ $retcode -eq 1 ]] && break;
      # case $retcode in
      #   0) retvalue="$bspec" ;;
      #   2) breqPrintStatus $level "warn" "!cyclic";

      #   *) break ;;
      # esac

      # if [[ $retcode -eq 1 ]]; then
      # elif [[ $retcode -eq 2 ]]
      #   breqPrintStatus $level "err" "!cyclic"
      #   break
      # fi
      # #! general dependency processing error
      # if [[ $retcode -eq 1 ]]; then
      #   breqPrintStatus $level "err" "!fail"
      #     #* on error we can mutate stdout results
      #   retvalue="$last_package"
      #   break
      # fi
    done
  done
  #? ---- surfaced, thank god good ----

  if [[ $retcode -eq 0 ]]; then # fixme: retval & retcode doesn't work as intended
    echo "$bspec"
  else
    echo "$retvalue"
  fi

  return $retcode
}

# endregion

# region #! build functions

# init build process
buildInit() {
  [[ -z $(dockerInit) ]] && return 1
  # info buildInit "=== test mode ==="
  # fixme: ugly
  guestClearFHS # fixme: test
  guestCreateFHS # fixme: test
}

# build task: buildTask <task>
buildTask() {
  local task=$1 bspecs
  taskInit $task
  bspecs=$(taskReqs $task)

  local retcode last_package
  for bs in ${bspecs[@]}; do
    last_package=$(breqAddNode 0 "$bs" 0 "" "$task")
    retcode=$?
    [[ $retcode -eq 1 ]] && error 1 EDEPEND "failed to get depended package: $(bspecName $last_package)"
    echo "" # instead [ OK ]
    # break # fixme: test
  done
}

# build all tasks: buildAll
buildAll() {
  buildInit || return 1
  for task in $(taskList); do
    buildTask $task
    break # fixme: test
  done
}

# endregion

